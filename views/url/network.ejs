CRC :--

#include <stdio.h>
  #include <stdlib.h>
    int main()
    {
    int i, j,k = 0;
    int flag = 1, a[16], g[16], r[20],div[16], n, m;
    printf("Enter the degree : ");
    scanf("%d", &n);
    printf("\nEnter the generator : \n");
    for(i= 0; i<=n; i++)
    scanf("%d", &g[i]);
    printf("\nEnter the degree of frame : ");
    scanf("%d", &m);
    printf("Enter the frame : \n");
    for(i = 0; i<=m; i++)
    scanf("%d", &a[i]);

    <!--if(m<n || (g[0] && g[n]) == 0)-->
           <!--{-->
           <!--printf("Not a proper generator \n");-->
    <!--exit(0);-->
    <!--}-->
    for(i = m+1; i<=m+n; i++)
    a[i] = 0;
    for(j= 0; j<=n; j++)
    r[j] = a[j];
    for(i= n; i<=m+n;i++)
    {
    if(i>n)
    {
    for(j = 0; j<n j++) <br>update;
    r[j] = r[j+1];
    r[j] = a[i];
    }
    if(r[0])
    div[k++] = 1;
    else
    {
    div[k++] = 0;
    continue;
    }
    for(j= 0; j=n j++) <br>update;<
    r[j] = r[j] ^ g[j] ;

    }
    printf("\nQuotient is : ");
    <!--for(j= 0; j<k j++) -->
    <!--printf("%d ", div[j]);-->
    printf("\nReminder is : ");
    for(i= 1; i<=n; i++)
    printf("%d ", r[i]);
    printf("\nTransmitted frame  is : ");
    for(i = m+1,j= 1; i<=m+n;i++, j++)
    a[i] = r[j];
    for(i= 0; i<=m+n; i++)
    printf("%d ", a[i]);
    printf("\n");

    printf("\nEnter the degree of frame : ");
    scanf("%d", &m);
    printf("Enter the frame : \n");
    for(i = 0; i<=m; i++)
    scanf("%d", &a[i]);
    for(j = 0; j<=n; j++)
    r[j] = a[j];
    k = 0;

    for(i= n; i<=m;i++)
    {
    if(i>n)
    {
    for(j = 0; j<n; j++)
    r[j] = r[j+1];
    r[j] = a[i];
    }
    if(r[0])
    div[k++] = 1;
    else
    {
    div[k++] = 0;
    continue;
    }
    for(j= 0; j<=n; j++)
    r[j] = r[j] ^ g[j] ;
    }
    printf("\nQuotient is : ");
    <!--for(j= 0; j<k; j++)--><br>
    printf("%d ", div[j]);
    printf("\nReminder is : ");
    for(i= 1; i<=n; i++)
    printf("%d ", r[i]);
    for(i= 1; i<=n; i++)
    {
    if(r[i])
    flag = 0;
    }

    if(flag)
    printf("\n There is No Error in data\n");
    else
    printf(â€œ\nThere is Error in data");
    return 0;
    }
    <br><br>

    Output :
    degree = 3
    generator = 1101
    degree of frame = 4
    frame = 00111
    <br>
    Again:
    degree frame = 4
    frame = 11011

    <br><br>







    Hamming Code :--

#include<stdio.h>
  #include<stdlib.h>

    char data[5];
    int encoded[8],edata[7],syndrome[3];
    int hmatrix[3][7] = {
    1,0,0,0,1,1,1,
    0,1,0,1,0,1,1,
    0,0,1,1,1,0,1
    };
    char gmatrix[4][8]={"0111000","1010100","1100010","1110001"};

    int main(){
    int i,j;
    system("clear");
    printf("Enter 4 bit data : ");
    scanf("%s",data);
    printf("\nGenerator matrix\n");
    for(i=0;i<4;i++)
    printf("%s\n",gmatrix[i]);
    printf("\nEncoded data ");
    for(i=0;i<7;i++)
    {
    for(j=0;j<4;j++)
    encoded[i]+=((data[j]-'0')*(gmatrix[j][i]-'0'));
    encoded[i]=encoded[i]%2;
    printf("%d ",encoded[i]);
    }
    printf("\nHamming code----- Decoding\n");
    printf("Enter encoded bits as recieved : ");
    for(i=0;i<7;i++)
    scanf("%d",&edata[i]);
    for(i=0;i<3;i++)
    {
    for(j=0;j<7;j++)
    syndrome[i]+=(edata[j]*hmatrix[i][j]);
    syndrome[i]=syndrome[i]%2;
    }
    for(j=0;j<7;j++)
    if((syndrome[0]==hmatrix[0][j]) && (syndrome[1]==hmatrix[1][j])&& (syndrome[2]==hmatrix[2][j]))
    break;
    if(j==7)
    printf("\nError free\n");
    else
    {
    printf("\nError recieved at bit number %d of data\n",j+1);
    edata[j]=!edata[j];
    printf("\nCorrect data should be : ");
    for(i=0;i<7;i++)
    printf("%d",edata[i]);
    }
    return 0;
    }

        <br>
        output :
        bit data : 1101
        encoded data : 0011101
        bits as recieved :
        0010101

        <br><br>







Selective Repeat :--

#include <stdio.h>
  #include <stdlib.h>

    #define CLEARBUF while(getchar()!='\n');


    #ifdef __unix
    #include <unistd.h>
      #elif __WIN32
      #include <windows.h>
        #endif


        int millisleep(unsigned ms)
        {
        #ifdef _WIN32
        SetLastError(0);
        Sleep(ms);
        return GetLastError() ?-1 :0;
        #elif __unix
        return usleep(1000 * ms);
        #else
        printf("error..");
        return -1;
        #endif
        }

        int windowSize = 5;
        int * sentArray;
        int * killedArray;
        int * receivedArray;
        int sendWindowLow = 1;
        int sendWindowHigh = 5;
        int rcvWindowLow = 1;
        int rcvWindowHigh = 5;
        int numAck = 0;
        int numRcvd = 0;
        int numPacketsToSend = 0;

        void makeWindow(int * array, int * low, int * high) {
        int i;
        // find the first packet not completely sent (with acknowledment)
        // or not completely received. [array[i] == 2 means that packet is done]
        for(i=1;i<=numPacketsToSend;i++) {
        if(array[i] != 2)
        break;
        }

        *low = i;
        *high = i + windowSize - 1;

        if(*high > numPacketsToSend)
        *high = numPacketsToSend;
        }

        void killPacket(int i) {
        char ch;
        printf("Kill packet %d? (y/n): ", i);
        scanf("%c", &ch);
        CLEARBUF

        if(ch == 'y' || ch == 'Y') // if packet should be killed
        {
        killedArray[i] = 1; // packet killed
        }
        }

        void sendPackets() {
        // update the sender side window
        makeWindow(sentArray, &sendWindowLow, &sendWindowHigh);
        int i;
        static int killOccurred = 0; // whether any packet in current window was lost/killed

        // to check for killed packets
        for(i=sendWindowLow; i<=sendWindowHigh; i++) {
        if(killedArray[i] == 1) {
        killOccurred = 1;
        }
        }

        // if there are killed packets
        if(killOccurred == 1) {
        // simulate waiting for acknowledgement of killed packets.
        printf("Waiting for acknowledgement of remaining packets...\n");
        millisleep(3000);
        printf("No acknowledgement received. Sending killed packets again...\n");

        // send only the killed packets again. (Unlike Go Back N which sends all
        // packets in current window)
        for(i=sendWindowLow; i<=sendWindowHigh; i++) {
        // sentArray[i] == 1 means packets which are sent but no
        // acknowledgement received
        if(sentArray[i] == 1) {
        killedArray[i] = 0;
        printf("Sending packet %d...\n", i);
        killPacket(i);
        sentArray[i] = 1;
        }
        }

        // reset the kill indicator;
        killOccurred = 0;
        return;
        }

        // if no kill has occured. Fresh window.
        // send the packets in the window
        for(i=sendWindowLow; i<=sendWindowHigh; i++) {
        printf("Sending packet %d...\n", i);
        killPacket(i);
        sentArray[i] = 1;
        }
        }

        void acknowledge(int i) {
        sentArray[i] = 2; // record the acknowledgement
        printf("Received Acknowledgement for packet %d!\n", i);
        numAck++;

        // update the sender side window
        makeWindow(sentArray, &sendWindowLow, &sendWindowHigh);
        }

        void receivePackets() {

        // update the receiver side window
        makeWindow(receivedArray, &rcvWindowLow, &rcvWindowHigh);
        int i;
        int killOccurred = 0;

        for(i=rcvWindowLow; i<=rcvWindowHigh; i++) {

        // if a packet has been killed, do not receive it.
        if(killedArray[i] == 1) {
        killOccurred = 1;
        continue;
        }

        // else, receive and send back acknowledgement
        if(receivedArray[i] == 0) {
        receivedArray[i] = 1;
        millisleep(500);
        printf("Received packet %d!\n", i);
        printf("Sending acknowledgement for packet %d...\n", i);
        acknowledge(i);
        receivedArray[i] = 2;
        numRcvd++;
        }
        }
        }

        int main(int argc, char * argv[]) {
        printf("Enter number of packets to send: ");
        scanf("%d", &numPacketsToSend);
        CLEARBUF

        printf("Enter window size: ");
        scanf("%d", &windowSize);
        CLEARBUF

        sentArray = (int*) calloc(numPacketsToSend+1, sizeof(int));
        killedArray = (int*) calloc(numPacketsToSend+1, sizeof(int));
        receivedArray = (int*) calloc(numPacketsToSend+1, sizeof(int));

        while(numAck != numPacketsToSend) {
        sendPackets();
        receivePackets();
        }}

                <br>

                Output :
                no of packets : 6
                window size : 10
                nyn.., se urself



        <br><br><br><br>



        GO BACK :--

        #include <stdio.h>

          #include <stdlib.h>

            #define CLEARBUF while(getchar()!='\n');


            #ifdef __unix
            #include <unistd.h>
              #elif __WIN32
              #include <windows.h>
                #endif


                int millisleep(unsigned ms)
                {
                #ifdef _WIN32
                SetLastError(0);
                Sleep(ms);
                return GetLastError() ?-1 :0;
                #elif __unix
                return usleep(1000 * ms);
                #else
                printf("error..");
                return -1;
                #endif
                }

                int windowSize = 5;

                int * sentArray;
                int * killedArray;
                int numPacketsToSend = 0;
                int * receivedArray;
                int numAck = 0;

                int windowLow = 0;
                int windowHigh = 4;

                void makeWindow() {
                if(numAck == 0) {
                windowLow = 1;
                windowHigh = windowLow + windowSize - 1;
                return;
                }

                windowLow = numAck+1;
                windowHigh = windowLow+ windowSize - 1;

                if (windowHigh > numPacketsToSend) {
                windowHigh = numPacketsToSend;
                }
                }

                void killPacket(int i) {
                char ch;
                printf("Kill packet %d? (y/n): ", i);
                scanf("%c", &ch);
                CLEARBUF

                if(ch == 'y' || ch == 'Y') // if packet should be killed
                {
                killedArray[i] = 1; // packet killed
                }

                }

                void sendPackets() {
                int i;
                static int killOccured = 0;
                if(killOccured == 1) {
                printf("\nWaiting for next packet acknowledgement...\n");
                millisleep(3000); //simulate wait
                printf("No acknowledgement received. Sending full window again...\n");

                printf("Window %d to %d:\n", windowLow, windowHigh);

                for(i=windowLow; i<=windowHigh; i++) {
                sentArray[i] = 0;
                killedArray[i] = 0;

                printf("\nSending packet %d...\n", i);
                sentArray[i] = 1; // packet sent from sender side
                killPacket(i); // ask to kill
                }
                killOccured = 0;
                return;
                }

                printf("Window %d to %d:\n", windowLow, windowHigh);

                for(i=windowLow; i<=windowHigh; i++) {
                if(killedArray[i] == 1) { // if killed packet encountered
                killOccured = 1;
                }

                // if i'th packet unsent, then send it.(Unsent = 0, Sent = 1, Ack = 2)
                if(sentArray[i] == 0) {
                printf("\nSending packet %d...\n", i);
                sentArray[i] = 1; // packet sent from sender side
                killPacket(i); // ask to kill
                }
                }

                }

                void sendAcknowlegdement(int i) {
                sentArray[i] = 2; // record the acknowledgement
                printf("Received acknowledgement for packet %d!\n\n", i);
                millisleep(500); // simulate some delay
                numAck = i;	// Acknowledgement number
                }

                void receivePackets() {
                int i;
                int killOccured = 0;
                for(i=windowLow; i<=windowHigh; i++) {
                if(killedArray[i] == 1) {
                killOccured = 1;
                break;
                }
                receivedArray[i] = 1;
                printf("\nReceived packet %d!\n", i);
                printf("Sending acknowledgement for packet %d...\n", i);

                millisleep(1000);

                sendAcknowlegdement(i);
                }
                }

                int main(int argc, char * argv[]) {
                printf("Enter number of packets to send: ");
                scanf("%d", &numPacketsToSend);
                CLEARBUF

                sentArray = (int*) calloc(numPacketsToSend+1, sizeof(int));
                receivedArray = (int*) calloc(numPacketsToSend+1, sizeof(int));
                killedArray = (int*) calloc(numPacketsToSend+1, sizeof(int));

                printf("Enter window size: ");
                scanf("%d", &windowSize);
                CLEARBUF

                printf("\n");
                while(numAck != numPacketsToSend) {
                makeWindow();
                sendPackets();
                receivePackets();
                }

                printf("\nSUCCESS! Acknowledgements received: %d\n", numAck);
                }

                        <br><br>
                        Output :
                        no of packets : 5
                        window size:3
                        nynnn




